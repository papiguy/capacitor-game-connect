{"version":3,"file":"plugin.cjs.js","sources":["esm/index.js","esm/web.js"],"sourcesContent":["import { registerPlugin } from '@capacitor/core';\nconst CapacitorGameConnect = registerPlugin('CapacitorGameConnect', {\n    web: () => import('./web').then(m => new m.CapacitorGameConnectWeb()),\n});\nexport * from './definitions';\nexport { CapacitorGameConnect };\n//# sourceMappingURL=index.js.map","import { WebPlugin } from '@capacitor/core';\nexport class CapacitorGameConnectWeb extends WebPlugin {\n    /**\n     * * Method to sign-in a user to Google Play Services\n     * * TODO: migrate interface to a different file\n     * * Add web support for signIn\n     */\n    async signIn() {\n        return Promise.resolve({});\n    }\n    /**\n     * Method to display the Leaderboards view from Google Play Services SDK\n     *\n     * @param leaderboardID as string\n     */\n    async showLeaderboard(options) {\n        console.info('showLeaderboard function has been called', options);\n        return Promise.resolve();\n    }\n    /**\n     * * Method to submit a score to the Google Play Services SDK\n     *\n     * @returns Promise\n     */\n    async submitScore(options) {\n        console.info('submitScore function has been called', options);\n        return Promise.resolve();\n    }\n    /**\n     * * Method to display the Achievements view from Google Play SDK\n     *\n     * @returns Promise\n     */\n    async showAchievements() {\n        return Promise.resolve();\n    }\n    /**\n     * * Method to unlock an achievement\n     *\n     * @returns  Promise\n     */\n    async unlockAchievement(options) {\n        console.info('unlockAchievement function has been called', options);\n        return Promise.resolve();\n    }\n    /**\n     * * Method to increment the progress of an achievement\n     *\n     * @returns Promise\n     */\n    async incrementAchievementProgress(options) {\n        console.info('incrementAchievementProgress function has been called', options);\n        return Promise.resolve();\n    }\n    /**\n     * * Function to get the total player score from a specific leaderboard\n     *\n     * @param options { leaderboardID: string }\n     * @returns Promise<PlayerScore>\n     */\n    async getUserTotalScore(options) {\n        console.info('getUserTotalScore function has been called', options);\n        return Promise.resolve({});\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["registerPlugin","WebPlugin"],"mappings":";;;;;;AACK,MAAC,oBAAoB,GAAGA,mBAAc,CAAC,sBAAsB,EAAE;AACpE,IAAI,GAAG,EAAE,MAAM,mDAAe,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,uBAAuB,EAAE,CAAC;AACzE,CAAC;;ACFM,MAAM,uBAAuB,SAASC,cAAS,CAAC;AACvD;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,MAAM,GAAG;AACnB,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACnC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,eAAe,CAAC,OAAO,EAAE;AACnC,QAAQ,OAAO,CAAC,IAAI,CAAC,0CAA0C,EAAE,OAAO,CAAC,CAAC;AAC1E,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,WAAW,CAAC,OAAO,EAAE;AAC/B,QAAQ,OAAO,CAAC,IAAI,CAAC,sCAAsC,EAAE,OAAO,CAAC,CAAC;AACtE,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,gBAAgB,GAAG;AAC7B,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,iBAAiB,CAAC,OAAO,EAAE;AACrC,QAAQ,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAC;AAC5E,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,4BAA4B,CAAC,OAAO,EAAE;AAChD,QAAQ,OAAO,CAAC,IAAI,CAAC,uDAAuD,EAAE,OAAO,CAAC,CAAC;AACvF,QAAQ,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACjC,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,iBAAiB,CAAC,OAAO,EAAE;AACrC,QAAQ,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,OAAO,CAAC,CAAC;AAC5E,QAAQ,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;AACnC,KAAK;AACL;;;;;;;;;"}